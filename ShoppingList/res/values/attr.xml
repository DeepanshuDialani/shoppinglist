<?xml version="1.0" encoding="utf-8"?>
<!-- 
 * Copyright (C) 2009-2011 OpenIntents.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 -->

<!-- 
  Version: OI Shopping List 1.4
  Date: 2011-07-28
 -->
 
<resources>

	<declare-styleable name="ShoppingList">
		<!-- Resource ID of background image. -->
		<attr name="background" format="integer" />
		
		<!-- Padding for background image.
			If all backgroundPadding is set to '-1px'
			then padding is obtained from background 9-patch drawable. -->
		<attr name="backgroundPadding" format="dimension" />
		<attr name="backgroundPaddingLeft" format="dimension" />
		<attr name="backgroundPaddingTop" format="dimension" />
		<attr name="backgroundPaddingRight" format="dimension" />
		<attr name="backgroundPaddingBottom" format="dimension" />
		
		<attr name="divider" format="integer" />
		
		<!-- Type face can be one of "monospace", "serif", "sans"
			or it can be the path to a font in the assets folder,
			like "myfont.ttf". -->
		<attr name="textTypeface" format="string" />
		
		<!-- Set true if the font only contains upper case characters. -->
		<attr name="textUpperCaseFont" format="boolean" />
		
		<attr name="textSizeTiny" format="dimension" />
		<attr name="textSizeSmall" format="dimension" />
		<attr name="textSizeMedium" format="dimension" />
		<attr name="textSizeLarge" format="dimension" />
		<attr name="textColor" format="color" />
		<attr name="textColorPrice" format="color" />
		<attr name="textColorPriority" format="color" />
		<attr name="textColorChecked" format="color" />
		<attr name="textStrikethroughChecked" format="boolean" />
		
		<!-- Suffix to add to unchecked elements. -->
		<attr name="textSuffixUnchecked" format="string" />
		
		<!-- Suffix to add to checked elements. -->
		<attr name="textSuffixChecked" format="string" />
		
		<attr name="showCheckBox" format="boolean" />
	
		<!-- Additional styles used for Notepad themes: -->
		<!-- Lines mode:
			 * 0..no line.
			 * 2..show lines only where there is text (padding width).
			 * 3..show lines only where there is text (full width).
			 * 4..show lines for whole page (padding width).
			 * 5..show lines for whole page (full width). -->
		<attr name="lineMode" format="integer" />
		<attr name="lineColor" format="color" />
	</declare-styleable>
	
<!-- 
  Attrs for PopupMenu code borrowed from AOSP ICS source 
 -->
  <attr name="listPreferredItemHeightSmall">64dip</attr>
  <attr name="listPreferredItemPaddingLeft">6dip</attr>
  <attr name="listPreferredItemPaddingRight">6dip</attr>
  <attr name="textAppearanceListItemSmall">?android:attr/textAppearanceLarge</attr>
  <attr name="textAppearanceSmall">@android:style/TextAppearance.Small</attr>
  <attr name="dropdownListPreferredItemHeight">?android:attr/listPreferredItemHeight</attr>
  <attr name="popupMenuStyle">@android:style/Widget.PopupMenu</attr>
  <dimen name="config_prefDialogWidth">320dp</dimen>

    <!-- GridLayout stuff -->
  
    <!-- Give ourselves access to MarginLayout's styleables -->
    <declare-styleable name="ViewGroup_MarginLayout">
        <attr name="android:layout_margin" />
        <attr name="android:layout_marginLeft" />
        <attr name="android:layout_marginTop" />
        <attr name="android:layout_marginRight" />
        <attr name="android:layout_marginBottom" />
    </declare-styleable>

    <!-- Alignment constants. -->
    <attr name="alignmentMode">
        <!-- Align the bounds of the children.
        See {@link android.widget.GridLayout#ALIGN_BOUNDS}. -->
        <enum name="alignBounds" value="0" />
        <!-- Align the margins of the children.
        See {@link android.widget.GridLayout#ALIGN_MARGINS}. -->
        <enum name="alignMargins" value="1" />
    </attr>
    
    <declare-styleable name="GridLayout">
        <!-- The orientation property is not used during layout. It is only used to
        allocate row and column parameters when they are not specified by its children's
        layout paramters. GridLayout works like LinearLayout in this case;
        putting all the components either in a single row or in a single column -
        depending on the value of this flag. In the horizontal case, a columnCount
        property may be additionally supplied to force new rows to be created when a
        row is full. The rowCount attribute may be used similarly in the vertical case.
        The default is horizontal. -->
        <attr name="android:orientation" />
        <!-- The maxmimum number of rows to create when automatically positioning children. -->
        <attr name="rowCount" format="integer" />
        <!-- The maxmimum number of columns to create when automatically positioning children. -->
        <attr name="columnCount" format="integer" />
        <!-- When set to true, tells GridLayout to use default margins when none are specified
        in a view's layout parameters.
        The default value is false.
        See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.-->
        <attr name="useDefaultMargins" format="boolean" />
        <!-- When set to alignMargins, causes alignment to take place between the outer
        boundary of a view, as defined by its margins. When set to alignBounds,
        causes alignment to take place between the edges of the view.
        The default is alignMargins.
        See {@link android.widget.GridLayout#setAlignmentMode(int)}.-->
        <attr name="alignmentMode" />
        <!-- When set to true, forces row boundaries to appear in the same order
        as row indices.
        The default is true.
        See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.-->
        <attr name="rowOrderPreserved" format="boolean" />
        <!-- When set to true, forces column boundaries to appear in the same order
        as column indices.
        The default is true.
        See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.-->
        <attr name="columnOrderPreserved" format="boolean" />
    </declare-styleable>

    <declare-styleable name="GridLayout_Layout">
        <!-- The row boundary delimiting the top of the group of cells
        occupied by this view. -->
        <attr name="layout_row" format="integer" />
        <!-- The row span: the difference between the bottom and top
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}. -->
        <attr name="layout_rowSpan" format="integer" min="1" />
        <!-- The column boundary delimiting the left of the group of cells
        occupied by this view. -->
        <attr name="android:layout_column" />
        <!-- The column span: the difference between the right and left
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}. -->
        <attr name="layout_columnSpan" format="integer" min="1" />
        <!-- Gravity specifies how a component should be placed in its group of cells.
        The default is LEFT | BASELINE.
        See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}. -->
        <attr name="android:layout_gravity" />
    </declare-styleable>
	    
</resources>